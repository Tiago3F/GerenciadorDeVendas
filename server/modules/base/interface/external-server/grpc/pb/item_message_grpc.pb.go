// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ItemClient is the client API for Item service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemClient interface {
	GetItems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Item_GetItemsClient, error)
}

type itemClient struct {
	cc grpc.ClientConnInterface
}

func NewItemClient(cc grpc.ClientConnInterface) ItemClient {
	return &itemClient{cc}
}

func (c *itemClient) GetItems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Item_GetItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Item_serviceDesc.Streams[0], "/fullcycle.Item/GetItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemGetItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Item_GetItemsClient interface {
	Recv() (*ItemEntity, error)
	grpc.ClientStream
}

type itemGetItemsClient struct {
	grpc.ClientStream
}

func (x *itemGetItemsClient) Recv() (*ItemEntity, error) {
	m := new(ItemEntity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemServer is the server API for Item service.
// All implementations must embed UnimplementedItemServer
// for forward compatibility
type ItemServer interface {
	GetItems(*Empty, Item_GetItemsServer) error
	mustEmbedUnimplementedItemServer()
}

// UnimplementedItemServer must be embedded to have forward compatible implementations.
type UnimplementedItemServer struct {
}

func (UnimplementedItemServer) GetItems(*Empty, Item_GetItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedItemServer) mustEmbedUnimplementedItemServer() {}

// UnsafeItemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServer will
// result in compilation errors.
type UnsafeItemServer interface {
	mustEmbedUnimplementedItemServer()
}

func RegisterItemServer(s *grpc.Server, srv ItemServer) {
	s.RegisterService(&_Item_serviceDesc, srv)
}

func _Item_GetItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemServer).GetItems(m, &itemGetItemsServer{stream})
}

type Item_GetItemsServer interface {
	Send(*ItemEntity) error
	grpc.ServerStream
}

type itemGetItemsServer struct {
	grpc.ServerStream
}

func (x *itemGetItemsServer) Send(m *ItemEntity) error {
	return x.ServerStream.SendMsg(m)
}

var _Item_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fullcycle.Item",
	HandlerType: (*ItemServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItems",
			Handler:       _Item_GetItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/item_message.proto",
}
